===================================================================
Testcases for the matrix_divided function
This file tests the functionality of the matrix_divided function
to ensure that it behaves as expected based on
its prototype and requirements
===================================================================

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test dividing a matrix by 2
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 2))
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

# Test dividing a matrix by 1.5
>>> matrix = [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
>>> print(matrix_divided(matrix, 1.5))
[[1.0, 1.67, 2.33], [3.0, 3.67, 4.33]]

# Test dividing a matrix by 0 (expecting ZeroDivisionError)
>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> try:
...     print(matrix_divided(matrix, 0))
... except ZeroDivisionError as e:
...     print(e)
division by zero

# Test dividing a matrix by a non-numeric divisor (expecting TypeError)
>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> try:
...     print(matrix_divided(matrix, '2'))
... except TypeError as e:
...     print(e)
div must be a number

# Test dividing a non-matrix (list of lists) by 2 (expecting TypeError)
>>> matrix = [1, 2, 3]
>>> try:
...     print(matrix_divided(matrix, 2))
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats

# Test dividing a matrix with inconsistent row lengths by 2 (expecting TypeError)
>>> matrix = [[1, 2, 3], [4, 5], [7, 8, 9]]
>>> try:
...     print(matrix_divided(matrix, 2))
... except TypeError as e:
...     print(e)
Each row of the matrix must have the same size
